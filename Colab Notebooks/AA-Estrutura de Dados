{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"AA-Estrutura de Dados","provenance":[],"authorship_tag":"ABX9TyOUiwKzh7ki0Ur8G3rBNOjc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yidfphenw8lf","executionInfo":{"status":"ok","timestamp":1654902982648,"user_tz":180,"elapsed":273,"user":{"displayName":"Lucas Melo","userId":"17034700614149051802"}},"outputId":"5b5bd8fc-359c-435e-f7b0-2a1489873078"},"outputs":[{"output_type":"stream","name":"stdout","text":["[146, 32, 88, 110, 170, 168, 104, 100, 174, 54, 30, 180, 12, 122, 14, 112, 0, 69, 196, 171, 148, 158, 154, 19, 166, 138, 61, 153, 59, 183, 123, 99, 135, 133, 66, 194, 156, 155, 92, 67, 93, 191, 145, 128, 111, 49, 87, 38, 164, 10]\n"]},{"output_type":"execute_result","data":{"text/plain":["list"]},"metadata":{},"execution_count":13}],"source":["#Gerando uma lista de números aleatórios\n","#É importado a biblioteca random que significa \"aleatórios\". É criado a variável numeros que receberá uma \n","#lista conforme parâmetros passados no random.dample. Neste caso 50 numeros aleatórios entre 0 e 200.\n","\n","import random\n","numeros = random.sample(range(200), 50)\n","print(numeros)\n","type(numeros)"]},{"cell_type":"code","source":["#Criando função que organiza a lista gerada com BubbleSort. Esta função verifica valor por valor \n","#percorrendo toda a lista, partindo do primeiro, identificando se o valor do próximo número é maior ou \n","#menor do que o valor que está sendo verificado. Se for menor o valor pula para a posição \n","#posterior e se menor o algorítmo passa a verificar o próximo valor com relação aos\n","#outros\n","\n","def bubble_sort(v):\n","  fim = len(v)\n","  while fim>0:\n","    i = 0\n","    while i < fim - 1:\n","      if v[i]  > v[i +1]:\n","        v[i], v[i + 1] = v[i + 1], v[i]\n","      i += 1\n","    fim -= 1\n","  return v\n","\n","print(bubble_sort(numeros))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wSujdLlZ5eTO","executionInfo":{"status":"ok","timestamp":1654902986650,"user_tz":180,"elapsed":282,"user":{"displayName":"Lucas Melo","userId":"17034700614149051802"}},"outputId":"52664511-5e55-4bbd-82ad-b092dd0fe16f"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 10, 12, 14, 19, 30, 32, 38, 49, 54, 59, 61, 66, 67, 69, 87, 88, 92, 93, 99, 100, 104, 110, 111, 112, 122, 123, 128, 133, 135, 138, 145, 146, 148, 153, 154, 155, 156, 158, 164, 166, 168, 170, 171, 174, 180, 183, 191, 194, 196]\n"]}]},{"cell_type":"code","source":["#Medindo tempo de execução do código anterior:\n","#É importado a biblioteca time. Posteriormente é marcado, no algorítimo um início de contagem.\n","#Após o algorítimo da função é marcado o fim da contagem. O print subtrai o tempo marcado no inicio,\n","# do tempo marcado no final, gerando o intervalo de tempo.\n","import time\n","start_time = time.time()\n","\n","def bubble_sort(v):\n","  fim = len(v)\n","  while fim>0:\n","    i = 0\n","    while i < fim - 1:\n","      if v[i]  > v[i +1]:\n","        v[i], v[i + 1] = v[i + 1], v[i]\n","      i += 1\n","    fim -= 1\n","  return v\n","\n","print(bubble_sort(numeros))\n","\n","end_time = time.time()\n","print(end_time - start_time,\"segundos\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LncyOchd594G","executionInfo":{"status":"ok","timestamp":1654903690577,"user_tz":180,"elapsed":257,"user":{"displayName":"Lucas Melo","userId":"17034700614149051802"}},"outputId":"2f2b5fd0-ca7f-4901-e780-5b8e966d144c"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 10, 12, 14, 19, 30, 32, 38, 49, 54, 59, 61, 66, 67, 69, 87, 88, 92, 93, 99, 100, 104, 110, 111, 112, 122, 123, 128, 133, 135, 138, 145, 146, 148, 153, 154, 155, 156, 158, 164, 166, 168, 170, 171, 174, 180, 183, 191, 194, 196]\n","0.006937265396118164 segundos\n"]}]},{"cell_type":"code","source":["#Criando a função Quicksort. Esta função compara os valores presentes na lista basicamente como no Bubblesort, porém esta determina\n","#um pivot para se basear a cada \"rodada\", separando os elementos menores que o pivot à esquerda e os elementos maiores à direita.\n","#Posteriormente o algorítimo analisa as duas sublistas formadas pela divisão desse pivot, repetindo as comparações até que toda\n","#lista se ordene.\n","\n","def partition(l, r, nums):\n","  pivot, ptr = nums[r], l\n","  for i in range(l, r):\n","    if nums[i] <= pivot:\n","      nums[i], nums[ptr] = nums[ptr], nums[i]\n","      ptr += 1\n","  nums[ptr], nums[r] = nums[r], nums[ptr]\n","  return ptr\n","\n","def quicksort(l, r, nums):\n","  if len(nums) == 1:\n","    return nums\n","  if l < r:\n","    pi = partition(l, r, nums)\n","    quicksort(l, pi-1, nums)\n","    quicksort(pi+1, r, nums)\n","  return nums\n","\n","print(quicksort(0, len(numeros)-1, numeros))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9hC3lV238lHe","executionInfo":{"status":"ok","timestamp":1654905347880,"user_tz":180,"elapsed":304,"user":{"displayName":"Lucas Melo","userId":"17034700614149051802"}},"outputId":"c2301eea-8f88-4d1b-96c5-ef695c8ca017"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 10, 12, 14, 19, 30, 32, 38, 49, 54, 59, 61, 66, 67, 69, 87, 88, 92, 93, 99, 100, 104, 110, 111, 112, 122, 123, 128, 133, 135, 138, 145, 146, 148, 153, 154, 155, 156, 158, 164, 166, 168, 170, 171, 174, 180, 183, 191, 194, 196]\n"]}]},{"cell_type":"code","source":["#Medindo tempo de execução do código anterior:\n","#É importado a biblioteca time. Posteriormente é marcado, no algorítimo um início de contagem.\n","#Após o algorítimo da função é marcado o fim da contagem. O print subtrai o tempo marcado no inicio,\n","# do tempo marcado no final, gerando o intervalo de tempo.\n","\n","import time\n","start_time = time.time()\n","\n","def partition(l, r, nums):\n","  pivot, ptr = nums[r], l\n","  for i in range(l, r):\n","    if nums[i] <= pivot:\n","      nums[i], nums[ptr] = nums[ptr], nums[i]\n","      ptr += 1\n","  nums[ptr], nums[r] = nums[r], nums[ptr]\n","  return ptr\n","\n","def quicksort(l, r, nums):\n","  if len(nums) == 1:\n","    return nums\n","  if l < r:\n","    pi = partition(l, r, nums)\n","    quicksort(l, pi-1, nums)\n","    quicksort(pi+1, r, nums)\n","  return nums\n","\n","print(quicksort(0, len(numeros)-1, numeros))\n","\n","\n","end_time = time.time()\n","print(end_time - start_time,\"segundos\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"96--VvDfDL5Y","executionInfo":{"status":"ok","timestamp":1654905462910,"user_tz":180,"elapsed":274,"user":{"displayName":"Lucas Melo","userId":"17034700614149051802"}},"outputId":"8d0d7e4f-d901-40e4-93f3-ddf3a117ad7e"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 10, 12, 14, 19, 30, 32, 38, 49, 54, 59, 61, 66, 67, 69, 87, 88, 92, 93, 99, 100, 104, 110, 111, 112, 122, 123, 128, 133, 135, 138, 145, 146, 148, 153, 154, 155, 156, 158, 164, 166, 168, 170, 171, 174, 180, 183, 191, 194, 196]\n","0.0014843940734863281 segundos\n"]}]}]}